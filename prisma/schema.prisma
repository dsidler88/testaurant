// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Restaurant {
  id          Int      @id @default(autoincrement())
  name        String
  main_image  String
  images      String[]
  description String
  open_time   String
  close_time  String
  slug        String   @unique
  price       PRICE
  items       Item[]
  location_id Int
  location    Location @relation(fields: [location_id], references: [id])
  cuisine_id  Int
  cuisine     Cuisine  @relation(fields: [cuisine_id], references: [id])
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  reviews     Review[]
  bookings    Booking[]
  tables     Table[]
}


model Item {
  id            Int        @id @default(autoincrement())
  name          String
  price         String
  description   String
  restaurant_id Int
  //this links restaurant_id to the id in the restaurant table
  restaurant    Restaurant @relation(fields: [restaurant_id], references: [id])
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
}

model Location {
  id         Int          @id @default(autoincrement())
  name       String       @unique
  Restaurant Restaurant[]
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt
}

model Cuisine {
  id         Int          @id @default(autoincrement())
  name       String
  Restaurant Restaurant[]
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt
}

enum PRICE {
  CHEAP
  REGULAR
  EXPENSIVE
}

model Review {
  id            Int        @id @default(autoincrement())
  first_name    String
  last_name     String
  rating        Float
  text          String
  restaurant_id Int
  restaurant    Restaurant @relation(fields: [restaurant_id], references: [id])
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  user          User       @relation(fields: [userId], references: [id])
  userId        Int
}

//table and booking added later
model Table {
  id Int @id @default(autoincrement())
  seats Int
  restaurant_id Int
  restaurant Restaurant @relation(fields: [restaurant_id], references: [id])
  bookings BookingsOnTables[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}
model Booking {
  id Int @id @default(autoincrement())
  number_of_people Int
  booking_time DateTime
  booker_email String
  booker_phone String
  booker_first_name String
  booker_last_name String
  booker_occasion String
  booker_request String
  restaurant_id Int
  restaurant Restaurant @relation(fields: [restaurant_id], references: [id])
  tables BookingsOnTables[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

//also added later. this is the join table
// it is the many to many relationship between bookings and tables
//booking is the booking_id, and it references the id in the booking table
//we had an id in the join table, but we don't need it, @@id([booking_id, table_id]) adds primary key
model BookingsOnTables {
  //id Int @id @default(autoincrement())
  booking_id Int
  booking Booking @relation(fields: [booking_id], references: [id])
  table_id Int
  table Table @relation(fields: [table_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@id([booking_id, table_id])
}

model User {
  id         Int      @id @default(autoincrement())
  first_name String
  last_name  String
  email      String   @unique
  password   String
  city       String
  phone      String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  reviews    Review[]
}

